/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/widgets/graph/Graph.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/graph/GraphLabels.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ChangeGraph(AbstractDataGraph::GraphClickEvent value)
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::TiledImage tiledImage1;
    touchgfx::Graph<512> FrequencyGraph;
    touchgfx::GraphElementGridX FrequencyGraphMajorXAxisGrid;
    touchgfx::GraphElementGridY FrequencyGraphMajorYAxisGrid;
    touchgfx::GraphLabelsX FrequencyGraphMajorXAxisLabel;
    touchgfx::GraphLabelsY FrequencyGraphMajorYAxisLabel;
    touchgfx::GraphElementLine FrequencyGraphLine1;
    touchgfx::PainterRGB565 FrequencyGraphLine1Painter;
    touchgfx::RadioButtonGroup<5> windowButtonGroup;
    touchgfx::RadioButton buttonFlatTop;
    touchgfx::RadioButton buttonBartlett;
    touchgfx::RadioButton buttonHamming;
    touchgfx::RadioButton buttonHanning;
    touchgfx::RadioButton buttonNone;
    touchgfx::TextArea textAreaHanning;
    touchgfx::TextArea textAreaNone;
    touchgfx::TextArea textAreaHamming;
    touchgfx::TextArea textAreaFlatTop;
    touchgfx::TextArea textAreaBartlett;
    touchgfx::TextArea textAreaWindowFunction;
    touchgfx::TextArea textAreaGraphLabelX;
    touchgfx::TextAreaWithOneWildcard textAreaGraphLabelY;
    touchgfx::TextAreaWithOneWildcard textAreaOverlap;
    touchgfx::TextArea textAreaFFT;
    touchgfx::TextAreaWithOneWildcard textAreaWindowSize;
    touchgfx::TextAreaWithOneWildcard textAreaPeakFrequency;
    touchgfx::TextAreaWithOneWildcard textAreaBin;
    touchgfx::TextAreaWithOneWildcard textAreaLinearRMS;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREAGRAPHLABELY_SIZE = 15;
    touchgfx::Unicode::UnicodeChar textAreaGraphLabelYBuffer[TEXTAREAGRAPHLABELY_SIZE];
    static const uint16_t TEXTAREAOVERLAP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textAreaOverlapBuffer[TEXTAREAOVERLAP_SIZE];
    static const uint16_t TEXTAREAWINDOWSIZE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar textAreaWindowSizeBuffer[TEXTAREAWINDOWSIZE_SIZE];
    static const uint16_t TEXTAREAPEAKFREQUENCY_SIZE = 8;
    touchgfx::Unicode::UnicodeChar textAreaPeakFrequencyBuffer[TEXTAREAPEAKFREQUENCY_SIZE];
    static const uint16_t TEXTAREABIN_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textAreaBinBuffer[TEXTAREABIN_SIZE];
    static const uint16_t TEXTAREALINEARRMS_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textAreaLinearRMSBuffer[TEXTAREALINEARRMS_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractDataGraph&, const touchgfx::AbstractDataGraph::GraphClickEvent&> graphClickedCallback;

    /*
     * Callback Handler Declarations
     */
    void graphClickedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphClickEvent& value);

};

#endif // SCREEN1VIEWBASE_HPP
